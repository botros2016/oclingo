DONE

- implemented hybrid Recomputation via --csp-cloning=X
- use advisors instead of reifwait, should be faster

2.0.0-beta
- compute domain of intermediate variables more clever, DONE
- branch on temporary variables, DONE
- enable lazy learning on options, DONE
- add automatic domain restriction for variables, DONE
- add global aggregate distinct DONE
- add global aggregate count DONE
- add optimization DONE
- added sum aggregate style DONE
- getAssignment() function optimized via callbacks DONE
- reduced csp-assignment to literals propagated from clasp, results in smaller reasons/conflicts
- disabled lookahead and --no-lookback
- support for  csp-opt-val and csp-opt-all
- optional initial lookahead of gecode constraints
- csp-prop-delay: only do csp propagation every n steps
- added Irreducible Infeasible Set algorithms for conflicts and reasons (--csp-reduce-conflict --csp-reduce-reason)


TODO

- test if recomputation instead of trailing can be used to save copying spaces !
- insert propagator for compact order encoding, simply add free variables to clasp!!!
- implement minimal inconsistent answer, if an answer fails, which constraints are needed, like IIS but with search instead of propagation (high computational efford)
- disable propQueue on force
- lexical ordering constraint for minimization ?
- implement OR and AND aggregates to initially restrict the domain to a set of variables (in WeightAssignmentTree to all possible values of additions? not possible, so less priority)
- newest gecode version
- write Makefile
- add show/hide statements
- add more global aggregates
- decide between search heuristic! (DFS, BAB)
- add statistics from Gecode
- dynamic setting of csp-prop-delay
	
- order constraints to the number of variables to speed up initial propagation
- force statt setconflict benutzen, spart Codepath!?
- look at possible benchmarks from "A General Nogood-Learning Framework for Pseudo-Boolean Multi-Valued SAT" and "Propagation = Lazy Clause Generation", SMT-Lib
- :- n(P) $!= X : number(X), position(P). is not yet supported ?



BUGS

- constraints in aggregates, triggered with test9.lpa (Roland has to change something first)
%debug(B) $== $sum{lev(E) : set(B,pos(E)) : sccatom(E), -1} :- hold(conjunction(B)), litb(pos(conjunction(B))), rule(pos(A),pos(conjunction(B))), sccatom(A).
this is a bug, junctioncond does not work



COMMENTS

-DCMAKE_BUILD_TYPE=release -DUSE_STATIC_LIBS=true -DWITH_CLINGCON=true -DBOOST_ROOT=/home/wv/bin/linux/64/boost-1.44/ -DGECODE_ROOT=/home/ostrowsk/usr/local

export WITH_CLINGCON=1
make target=clingcon-app
